#!/usr/bin/env python

import requests
import json
import os
import sys
import re
from datetime import datetime

from pprint import pprint

# Yay open-source
KEY = 0xA3

# XOR encrypted client id key, just some obfuscation to try and 
# stop bots that eat api keys
CLIENT_ID = [148, 199, 151, 193, 193, 192, 149, 145, 192, 148, 150, 199, 145, 
             148, 148, 144, 145, 147, 148, 145, 151, 146, 193, 148, 199, 193, 
             155, 148, 148, 154, 145, 150]
CLIENT_ID = "".join(chr(x ^ KEY) for x in CLIENT_ID)
API_URL = "http://api.soundcloud.com"

labels = [ "b", "kib", "mib", "gib", "tib", "pib", "eib" ]

def get_pretty_bytes(value, r=1):
    v_index = 0
    while value > 1024:
        value = float(value)/1024
        v_index += 1
    return round(value, r), labels[v_index]

def get_rel(url):
    "Return a url relative to the soundcloud api"
    return "".join((API_URL, url))

def fetch_resource_information(url):
    "Get information for a given resource"
    info = requests.get(get_rel("/resolve.json"),
    params={
        "client_id": CLIENT_ID,
        "url": url
    })
    return json.loads(info.text)

def filesafe(st):
    "Make a string, sorta filesafe"
    return st.replace('/', '_')

def fallback_stream(track):
    track_re = re.compile(r"window.SC.bufferTracks.push\((.*)\);")
    track_page = requests.get(track["permalink_url"])
    tracks = []
    for match in track_re.findall(track_page.text):
        tracks.append(json.loads(match))

    for t in tracks:
        if t["id"] == track["id"]: 
            return t["streamUrl"]
    return None
    

def download_track(track):
    """Download a track from soundhound
    Requires: streamable, downloadable
    stream_url, and download_url 
    parameters in track."""
    print "{0:-^70}".format(" Downloading Track ")
    print u"{title}\nby: {user[username]}".format(**track)

    # Clean up the filename
    filename = u"{title} - {user[username]}.mp3".format(**track)
    filename = filesafe(filename)

    url = None
    if "download_url" in track:
        url = track["download_url"]
    elif "stream_url" in track:
        url = track["stream_url"]
    else:
        print "No official stream, trying fallback..."
        url = fallback_stream(track)

    if url is None:
        print "Unable to find a download url for track:", track["title"]
        sys.exit(1)

    page = requests.get(url, params={
        "client_id": CLIENT_ID
    }, stream=True)

    file_length = int(page.headers['Content-Length'])
    start = datetime.now()
    bytes_per_second = 0
    written_length = 0.0
    chunk_size = 1024 # 1 KiB
    with open(filename, 'wb') as output:
        for block in page.iter_content(chunk_size=chunk_size):
            status = round((written_length/file_length)*100, 1)
            elapsed = datetime.now() - start
            if elapsed.seconds > 0:
                bytes_per_second = written_length/elapsed.seconds
                p_value, label = get_pretty_bytes(bytes_per_second)
            else: 
                p_value, label = 0, labels[0]
            # Status message
            sys.stdout.write("\rDownloading: {0}% ({1}{2}/s)"\
                             .format(status, p_value, label))
            sys.stdout.flush()
            written_length += chunk_size
            output.write(block)
    print "\n"

def download_user(user, args):
    "Download all of a users tracks"
    tracklist = requests.get(get_rel("/users/{0}/tracks.json".format(user["id"])), 
    params={
        "client_id": CLIENT_ID
    })
    tracklist = json.loads(tracklist.text)
    if args.dir:
        prev_dir = os.getcwd()
        dirname = filesafe(user["full_name"])
        os.mkdir(dirname)
        os.chdir(os.path.join(os.getcwd(), dirname))
    print u"Downloading all of {0}'s tracks...".format(user["full_name"])
    for track in tracklist:
        download_track(track)
    if args.dir:
        os.chdir(prev_dir)

def download_set(playlist, args):
    "Download a soundcloud set"
    if args.dir:
        prev_dir = os.getcwd()
        dirname = filesafe(playlist["title"])
        os.mkdir(dirname)
        os.chdir(os.path.join(os.getcwd(), dirname))
    print u"Downloading Set: {0}...".format(playlist["title"])
    for track in playlist["tracks"]:
        download_track(track)
    if args.dir:
        os.chdir(prev_dir)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(prog="soundrip")
    parser.add_argument("url", help="URL of the page of the song you want to\
                        download", nargs="+")
    parser.add_argument("-d", "--dir", help="Make a directory to hold all of the\
                        new files in", action="store_true")
    args = parser.parse_args()

    for url in args.url:
        resource = fetch_resource_information(url)
        if resource.get("kind") == "track":
            download_track(resource)
        elif resource.get("kind") == "playlist":
            download_set(resource, args)
        elif resource.get("kind") == "user":
            download_user(resource, args)
        else:
            pprint(resource)
            print "Unkown resource type: {0}".format(resource["kind"])
